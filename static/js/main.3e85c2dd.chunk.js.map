{"version":3,"sources":["AppContext.jsx","bootstrap-components.jsx","icons.jsx","Quiz.jsx","Header.jsx","App.jsx","serviceWorker.js","index.js"],"names":["AppContext","React","createContext","StyledForm","styled","Form","StyledContainer","Container","StyledRow","Row","StyledCol","Col","StyledButton","Button","Circle","className","color","size","icon","faCircle","style","View","div","ColorButtonArea","PitchArea","ColorButton","ButtonWrapper","getRandomInt","min","max","Math","ceil","floor","random","audio","push","Audio","Quiz","useState","numOfQuiz","setNumOfQuiz","start","setStart","stage","setStage","length","pitchIndex","setPitchIndex","makeQuiz","p","id","Consumer","value","onClick","play","fluid","pitches","map","key","sm","xs","variant","Label","Control","placeholder","type","onChange","event","target","Head","Header","App","state","fetch","res","json","this","setState","console","log","Provider","basename","exact","path","render","props","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3e85c2dd.chunk.js","sourcesContent":["import React from \"react\";\n\nconst AppContext = React.createContext();\n\nexport default AppContext;\n","import styled from \"styled-components\";\nimport { Form, Container, Row, Col, Button } from \"react-bootstrap\";\n\nconst StyledForm = styled(Form)``;\nconst StyledContainer = styled(Container)``;\nconst StyledRow = styled(Row)``;\nconst StyledCol = styled(Col)``;\nconst StyledButton = styled(Button)``;\n\nexport { StyledForm, StyledCol, StyledRow, StyledButton, StyledContainer };\n","import React from \"react\";\nimport { faCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nlet Circle = ({ className, color, size }) => {\n  return (\n    <FontAwesomeIcon\n      className={className}\n      icon={faCircle}\n      size={size || \"4x\"}\n      style={{ color: color }}\n    />\n  );\n};\n\nexport { Circle };\n","import React, { useState } from \"react\";\nimport AppContext from \"./AppContext\";\n\nimport styled from \"styled-components\";\nimport {\n  StyledCol as Col,\n  StyledRow as Row,\n  StyledForm as Form,\n  StyledButton as Button,\n  StyledContainer as Container\n} from \"./bootstrap-components\";\n\nimport { Circle } from \"./icons\";\n\nconst View = styled.div``;\nconst ColorButtonArea = styled.div``;\nconst PitchArea = styled.div``;\nconst ColorButton = styled(Button)``;\nconst ButtonWrapper = styled.div``;\n\nlet getRandomInt = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min;\n};\n\nconst audio = [];\naudio.push(new Audio(\"/colorlovespitch/C4.mp3\"));\naudio.push(new Audio(\"/colorlovespitch/Db4.mp3\"));\naudio.push(new Audio(\"/colorlovespitch/D4.mp3\"));\naudio.push(new Audio(\"/colorlovespitch/Eb4.mp3\"));\naudio.push(new Audio(\"/colorlovespitch/E4.mp3\"));\naudio.push(new Audio(\"/colorlovespitch/F3.mp3\"));\naudio.push(new Audio(\"/colorlovespitch/Gb3.mp3\"));\naudio.push(new Audio(\"/colorlovespitch/G3.mp3\"));\naudio.push(new Audio(\"/colorlovespitch/Ab3.mp3\"));\naudio.push(new Audio(\"/colorlovespitch/A3.mp3\"));\naudio.push(new Audio(\"/colorlovespitch/Bb3.mp3\"));\naudio.push(new Audio(\"/colorlovespitch/B3.mp3\"));\n\nlet Quiz = ({ className }) => {\n  const [numOfQuiz, setNumOfQuiz] = useState(0);\n  const [start, setStart] = useState(false);\n  const [stage, setStage] = useState(0);\n  const [pitchIndex, setPitchIndex] = useState(getRandomInt(0, audio.length));\n\n  let makeQuiz = p => {\n    if (pitchIndex === p.id - 4) {\n      setStage(stage + 1);\n      setPitchIndex(getRandomInt(0, audio.length));\n    }\n  };\n\n  return (\n    <div className={className}>\n      <AppContext.Consumer>\n        {value => (\n          <View>\n            {start ? (\n              <>\n                <PitchArea>\n                  <Button\n                    onClick={() => {\n                      audio[pitchIndex].play();\n                    }}\n                  >\n                    Play\n                  </Button>\n                </PitchArea>\n                <ColorButtonArea>\n                  <Container fluid>\n                    <Row>\n                      {value.pitches.map(\n                        p =>\n                          p.id % 4 === 0 && (\n                            <Col key={p.id} sm={4} xs={8}>\n                              <ColorButton\n                                variant=\"link\"\n                                onClick={() => makeQuiz(p)}\n                              >\n                                <Circle color={p.color} />\n                              </ColorButton>\n                            </Col>\n                          )\n                      )}\n                    </Row>\n                    <Row>\n                      {value.pitches.map(\n                        p =>\n                          p.id % 4 === 1 && (\n                            <Col key={p.id} sm={4} xs={8}>\n                              <ColorButton\n                                variant=\"link\"\n                                onClick={() => makeQuiz(p)}\n                              >\n                                <Circle color={p.color} />\n                              </ColorButton>\n                            </Col>\n                          )\n                      )}\n                    </Row>\n                    <Row>\n                      {value.pitches.map(\n                        p =>\n                          p.id % 4 === 2 && (\n                            <Col key={p.id} sm={4} xs={8}>\n                              <ColorButton\n                                variant=\"link\"\n                                onClick={() => makeQuiz(p)}\n                              >\n                                <Circle color={p.color} />\n                              </ColorButton>\n                            </Col>\n                          )\n                      )}\n                    </Row>\n                    <Row>\n                      {value.pitches.map(\n                        p =>\n                          p.id % 4 === 3 && (\n                            <Col key={p.id} sm={4} xs={8}>\n                              <ColorButton\n                                variant=\"link\"\n                                onClick={() => makeQuiz(p)}\n                              >\n                                <Circle color={p.color} />\n                              </ColorButton>\n                            </Col>\n                          )\n                      )}\n                    </Row>\n                  </Container>\n                </ColorButtonArea>\n              </>\n            ) : (\n              <>\n                <Form>\n                  <Form.Label>Number of quizes</Form.Label>\n                  <Form.Control\n                    placeholder=\"Number of quizes\"\n                    type=\"number\"\n                    value={numOfQuiz}\n                    onChange={event => setNumOfQuiz(event.target.value)}\n                  ></Form.Control>\n                </Form>\n                <ButtonWrapper>\n                  <Button onClick={() => setStart(true)}>Start</Button>\n                </ButtonWrapper>\n              </>\n            )}\n          </View>\n        )}\n      </AppContext.Consumer>\n    </div>\n  );\n};\n\nQuiz = styled(Quiz)`\n  margin-top: 30px;\n  ${View} {\n    display: flex;\n    justify-content: center;\n    align-items: flex-end;\n  }\n\n  ${ColorButtonArea} {\n  }\n\n  ${PitchArea} {\n    padding: 20px 0;\n  }\n\n  ${ColorButton} {\n    margin-right: 10px;\n  }\n\n  ${ButtonWrapper} {\n    margin-left: 20px;\n  }\n`;\n\nexport default Quiz;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Head = styled.div`\n  width: 100%;\n  height: 70px;\n  background-color: black;\n  color: white;\n  text-align: center;\n  padding-top: 30px;\n  font-weight: bold;\n  font-size: 30px;\n  font-family: monospace;\n`;\n\nconst Header = () => {\n  return <Head>Color Loves Pitch</Head>;\n};\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport Quiz from \"./Quiz\";\nimport Header from \"./Header\";\nimport AppContext from \"./AppContext\";\n\nclass App extends Component {\n  state = {\n    pitches: []\n  };\n\n  async componentDidMount() {\n    try {\n      const res = await fetch(\"http://127.0.0.1:8000/api/\");\n      const pitches = await res.json();\n      this.setState({ pitches });\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <AppContext.Provider value={{ pitches: this.state.pitches }}>\n          <Header />\n          <Router basename=\"/\">\n            <Route exact path=\"/\" render={props => <Quiz {...props} />} />\n          </Router>\n        </AppContext.Provider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}